// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/zod"
  createInputTypes = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  ticker      String?  @unique
  exchange    String?
  sector      String?
  industry    String?
  description String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ipos        IPO[]
  filings     SECFiling[]
  socialMentions SocialMention[]

  @@map("companies")
}

model IPO {
  id             String      @id @default(cuid())
  companyId      String
  company        Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // IPO Details
  filingDate     DateTime?
  expectedDate   DateTime?
  actualDate     DateTime?
  status         IPOStatus   @default(FILED)

  // Financial Data
  sharesOffered  BigInt?
  priceRangeLow  Decimal?    @db.Decimal(10, 2)
  priceRangeHigh Decimal?    @db.Decimal(10, 2)
  actualPrice    Decimal?    @db.Decimal(10, 2)
  marketCap      BigInt?

  // Filing Information
  secFilingId    String?
  secFiling      SECFiling?  @relation(fields: [secFilingId], references: [id])

  // Metadata
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  socialMentions SocialMention[]
  userWatchlists UserWatchlist[]

  @@map("ipos")
}

model SECFiling {
  id          String     @id @default(cuid())
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Filing Details
  accessionNumber String  @unique
  filingType      String  // S-1, S-1/A, etc.
  filingDate      DateTime
  reportDate      DateTime?

  // Document Information
  documentUrl     String
  htmlUrl         String?
  documentTitle   String?
  documentSize    Int?

  // Parsed Data
  parsedData      Json?    // Store structured data from filing

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  ipos            IPO[]

  @@map("sec_filings")
}

model SocialMention {
  id          String        @id @default(cuid())
  companyId   String?
  company     Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ipoId       String?
  ipo         IPO?          @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  // Social Data
  platform    SocialPlatform
  postId      String        @unique
  author      String
  content     String
  url         String

  // Metrics
  likes       Int           @default(0)
  shares      Int           @default(0)
  comments    Int           @default(0)
  views       Int           @default(0)

  // Sentiment Analysis
  sentiment   SentimentType?
  sentimentScore Decimal?   @db.Decimal(3, 2) // -1.00 to 1.00

  // Timestamps
  postedAt    DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("social_mentions")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  watchlists UserWatchlist[]

  @@map("users")
}

model UserWatchlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ipoId     String
  ipo       IPO      @relation(fields: [ipoId], references: [id], onDelete: Cascade)

  // Watchlist Settings
  alertsEnabled Boolean @default(true)
  notes         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, ipoId])
  @@map("user_watchlists")
}

// Enums
enum IPOStatus {
  FILED
  PRICED
  WITHDRAWN
  POSTPONED
  COMPLETED
}

enum SocialPlatform {
  TWITTER
  REDDIT
  LINKEDIN
  YOUTUBE
}

enum SentimentType {
  POSITIVE
  NEGATIVE
  NEUTRAL
}
